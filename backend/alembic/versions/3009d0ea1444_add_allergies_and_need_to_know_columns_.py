"""add allergies and need_to_know columns to kids

Revision ID: 3009d0ea1444
Revises: e01caaa97916
Create Date: 2025-09-23 21:55:23.000686

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '3009d0ea1444'
down_revision = 'e01caaa97916'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('educators', 'daycare_id',
               existing_type=sa.UUID(),
               nullable=False)
    
    # Check if constraints exist before dropping them
    connection = op.get_bind()
    
    # Check if uq_educators_daycare_email constraint exists
    result = connection.execute(sa.text("""
        SELECT constraint_name 
        FROM information_schema.table_constraints 
        WHERE table_name = 'educators' 
        AND constraint_name = 'uq_educators_daycare_email'
    """))
    if result.fetchone():
        op.drop_constraint(op.f('uq_educators_daycare_email'), 'educators', type_='unique')
    
    # Check if uq_groups_daycare_name constraint exists
    result = connection.execute(sa.text("""
        SELECT constraint_name 
        FROM information_schema.table_constraints 
        WHERE table_name = 'groups' 
        AND constraint_name = 'uq_groups_daycare_name'
    """))
    if result.fetchone():
        op.drop_constraint(op.f('uq_groups_daycare_name'), 'groups', type_='unique')
    
    op.add_column('kids', sa.Column('allergies', sa.Text(), nullable=True))
    op.add_column('kids', sa.Column('need_to_know', sa.Text(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('kids', 'need_to_know')
    op.drop_column('kids', 'allergies')
    
    # Check if constraints exist before creating them
    connection = op.get_bind()
    
    # Check if uq_groups_daycare_name constraint exists
    result = connection.execute(sa.text("""
        SELECT constraint_name 
        FROM information_schema.table_constraints 
        WHERE table_name = 'groups' 
        AND constraint_name = 'uq_groups_daycare_name'
    """))
    if not result.fetchone():
        op.create_unique_constraint(op.f('uq_groups_daycare_name'), 'groups', ['daycare_id', 'name'], postgresql_nulls_not_distinct=False)
    
    # Check if uq_educators_daycare_email constraint exists
    result = connection.execute(sa.text("""
        SELECT constraint_name 
        FROM information_schema.table_constraints 
        WHERE table_name = 'educators' 
        AND constraint_name = 'uq_educators_daycare_email'
    """))
    if not result.fetchone():
        op.create_unique_constraint(op.f('uq_educators_daycare_email'), 'educators', ['daycare_id', 'email'], postgresql_nulls_not_distinct=False)
    
    op.alter_column('educators', 'daycare_id',
               existing_type=sa.UUID(),
               nullable=True)
    # ### end Alembic commands ###
